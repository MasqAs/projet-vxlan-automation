{# Leaf Configuration Template #}

{# Base Interface Configuration #}
{% for interface in device.interfaces.all() %}
interface {{ interface.name }}
{%- if interface.description %}
 description {{ interface.description }}
{%- endif %}
{%- if interface.name == 'Ethernet3' %}
 switchport mode trunk
 no shutdown
 mtu 9214
{%- else %}
 no shutdown
 no switchport
{%- set ip_address = interface.ip_addresses.first() %}
{%- if ip_address %}
 ip address {{ ip_address.address }}
{%- endif %}
 mtu 9214
{%- endif %}
!
{% endfor %}

{# BGP Underlay Configuration #}
{% set loopback_interface = device.interfaces.get(name='Loopback0') %}
{% set router_id = loopback_interface.ip_addresses.first().address.ip %}
router bgp {{ device.custom_field_data.ASN }}
 router-id {{ router_id }}
 maximum-paths 4 ecmp 4
 
 ! Spine Peer Group Configuration
 neighbor SPINE_GROUP peer group
 neighbor SPINE_GROUP allowas-in 1
 neighbor SPINE_GROUP ebgp-multihop 4
 neighbor SPINE_GROUP send-community extended
 neighbor SPINE_GROUP maximum-routes 12000

 ! Neighbor Configuration
{%- for interface in device.interfaces.all() %}
    {%- if interface.connected_endpoints and interface.name != 'Ethernet3' %}
        {%- for remote_interface in interface.connected_endpoints %}
            {%- set remote_ip = remote_interface.ip_addresses.first() %}
            {%- if remote_ip %}
 neighbor {{ remote_ip.address.ip }} peer group SPINE_GROUP
 neighbor {{ remote_ip.address.ip }} remote-as {{ remote_interface.device.custom_field_data.ASN }}
            {%- endif %}
        {%- endfor %}
    {%- endif %}
{%- endfor %}

 ! IPv4 Address Family
 address-family ipv4
{%- for interface in device.interfaces.all() %}
    {%- if interface.connected_endpoints and interface.name != 'Ethernet3' %}
        {%- for remote_interface in interface.connected_endpoints %}
            {%- set remote_ip = remote_interface.ip_addresses.first() %}
            {%- if remote_ip %}
  neighbor {{ remote_ip.address.ip }} activate
            {%- endif %}
        {%- endfor %}
    {%- endif %}
{%- endfor %}
!

{# VXLAN Configuration for Customer Services #}
{% if device.location and device.location.tenant %}
    {%- set tenant = device.location.tenant %}
    {%- set tenant_vlans = tenant.vlans.all() %}
    {%- set tenant_prefix = tenant.prefixes.first() %}
    {%- set tenant_l2vpns = tenant.l2vpns.filter(type='vxlan-evpn') %}
    {%- set loopback_ip = device.interfaces.get(name='Loopback0').ip_addresses.first().address.ip %}

! Virtual Router Configuration
ip virtual-router mac-address 00:0a:bc:10:11:02
!
    {# VLAN and VRF Configuration #}
    {%- for vlan in tenant_vlans %}
vlan {{ vlan.vid }}
 name IRB_{{ tenant.name|upper }}_SERVICE
!
interface Vlan{{ vlan.vid }}
 description {{ tenant.name }} Service Interface
 vrf {{ tenant.name|upper }}
        {%- if tenant_prefix %}
            {%- set network = tenant_prefix.prefix.network %}
            {%- set first_ip = network + 1 %}
 ip address virtual {{ first_ip }}/{{ tenant_prefix.prefix.prefixlen }}
        {%- endif %}
!
    {%- endfor %}

    {# VXLAN Interface Configuration #}
    {%- set spine_loopbacks = [] %}
    {%- for spine in device.site.devices.filter(role__slug='spine') %}
        {%- set spine_lo = spine.interfaces.get(name='Loopback0').ip_addresses.first() %}
        {%- if spine_lo %}
            {%- set _ = spine_loopbacks.append(spine_lo.address.ip) %}
        {%- endif %}
    {%- endfor %}

    {# VXLAN Interface per L2VPN #}
    {%- for l2vpn in tenant_l2vpns %}
        {%- set vxlan_index = loop.index %}
interface Vxlan{{ vxlan_index }}
 description VTI
 vxlan source-interface Loopback0
        {%- for vlan in tenant_vlans %}
 vxlan vlan {{ vlan.vid }} vni {{ l2vpn.identifier }}
            {%- for spine_ip in spine_loopbacks %}
 vxlan vlan {{ vlan.vid }} flood vtep {{ spine_ip }}
            {%- endfor %}
        {%- endfor %}
!
    {%- endfor %}

    {# BGP EVPN Configuration #}
router bgp {{ device.custom_field_data.ASN }}
    {%- for vlan in tenant_vlans %}
        {%- set l2vpn = tenant_l2vpns.first() %}
        {%- if l2vpn %}
 vlan {{ vlan.vid }}
  rd {{ loopback_ip }}:{{ l2vpn.identifier }}
  route-target both {{ l2vpn.identifier }}:{{ vlan.vid }}
  redistribute learned
        {%- endif %}
    {%- endfor %}
{% endif %}